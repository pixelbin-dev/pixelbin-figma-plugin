{
  "version": 3,
  "sources": ["../../constants.ts", "../../plugin/index.ts"],
  "sourcesContent": ["const eraseBgOptions = [\n\t{\n\t\tname: \"Industry Type\",\n\t\ttype: \"enum\",\n\t\tenum: [\"general\", \"ecommerce\", \"car\", \"human\"],\n\t\tpreview: [\"car\"],\n\t\tdefault: \"general\",\n\t\tidentifier: \"i\",\n\t\ttitle: \"Industry type\",\n\t},\n\t{\n\t\tname: \"Add Shadow\",\n\t\ttitle: \"Add Shadow (cars only)\",\n\t\ttype: \"boolean\",\n\t\tdefault: false,\n\t\tpreview: false,\n\t\tidentifier: \"shadow\",\n\t},\n\t{\n\t\tname: \"Refine\",\n\t\ttitle: \"Refine Output\",\n\t\ttype: \"boolean\",\n\t\tdefault: true,\n\t\tidentifier: \"r\",\n\t},\n];\n\nexport default eraseBgOptions;\n", "import eraseBgOptions from \"../constants\";\n// Handle the execution of the first command\n// if (figma.command == \"plugin-command\")\n// \tfigma.closePlugin(\"The plugin command was executed\");\n\n// Configure the command that involves a UI\n\n// Present a UI, providing it with Figma CSS color variables\nfigma.showUI(__html__, {\n\ttitle: \"Erase Bg\",\n\theight: 400,\n\twidth: 248,\n\tthemeColors: true,\n});\n\n// Create a variable to store the rectangles that will be created\nconst rectangles: RectangleNode[] = [];\n\n/* Handle the\u00A0message from the\u00A0UI, being aware that it\u00A0will be\u00A0an\u00A0object with the\u00A0single `count` property */\nfigma.ui.onmessage = async (msg) => {\n\tif (msg.type === \"initialCall\") {\n\t\tconst body = {\n\t\t\ttype: \"createForm\",\n\t\t\toptionsArray: eraseBgOptions,\n\t\t\tsavedFormValue: \"\",\n\t\t};\n\n\t\tfigma.clientStorage\n\t\t\t.getAsync(\"savedFormValue\")\n\t\t\t.then((value) => {\n\t\t\t\tbody.savedFormValue = value;\n\t\t\t\tfigma.ui.postMessage(body);\n\t\t\t\tconsole.log(\"SavedValues\", value);\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error(\"Error loading data:\", err);\n\t\t\t});\n\t}\n\n\tif (msg.type === \"transform\") {\n\t\tif (msg.params) {\n\t\t\tfigma.clientStorage\n\t\t\t\t.setAsync(\"savedFormValue\", msg.params)\n\t\t\t\t.then(() => {\n\t\t\t\t\tconsole.log(`Data saved`, msg.params);\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.error(\"Error saving data:\", err);\n\t\t\t\t});\n\t\t}\n\n\t\tif (figma.currentPage.selection.length > 1)\n\t\t\tfigma.notify(\"Please select a single node\");\n\t\telse {\n\t\t\tlet node: any = figma.currentPage.selection[0];\n\n\t\t\ttry {\n\t\t\t\tconst res = await fetch(\n\t\t\t\t\t\"http://localhost:8081/service/platform/assets/v1.0/upload/signed-url\",\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\"x-pixelbin-token\": \"da66bab0-723a-4157-94ab-b4e83fd910e1\",\n\t\t\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\t\t\t// mode: \"cors\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tpath: \"path/to/containing/folder\",\n\t\t\t\t\t\t\tname: \"filename\",\n\t\t\t\t\t\t\tformat: \"jpeg\",\n\t\t\t\t\t\t\taccess: \"public-read\",\n\t\t\t\t\t\t\ttags: [\"tag1\", \"tag2\"],\n\t\t\t\t\t\t\tmetadata: {},\n\t\t\t\t\t\t\toverwrite: false,\n\t\t\t\t\t\t\tfilenameOverride: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tredirect: \"follow\",\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconsole.log(\"sure\", res);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.log(\"Err\", err);\n\t\t\t}\n\n\t\t\tif (node.fills[0].type === \"IMAGE\") {\n\t\t\t\tconst image = figma.getImageByHash(node.fills[0].imageHash);\n\t\t\t\tlet bytes: any = null;\n\t\t\t\tif (image) {\n\t\t\t\t\tbytes = await image.getBytesAsync();\n\t\t\t\t\t// const imageLayer = figma.createImage(bytes);\n\t\t\t\t\t// figma.currentPage.appendChild(imageLayer);\n\t\t\t\t\tfigma.ui.postMessage({\n\t\t\t\t\t\ttype: \"selectedImage\",\n\t\t\t\t\t\timageBytes: bytes,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfigma\n\t\t\t\t.createImageAsync(\n\t\t\t\t\t\"https://cdn.pixelbin.io/v2/muddy-lab-41820d/erase.bg(i:general,shadow:false,r:true)/__playground/playground-default.jpeg\"\n\t\t\t\t)\n\t\t\t\t.then(async (image: Image) => {\n\t\t\t\t\tnode.fills = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: \"IMAGE\",\n\t\t\t\t\t\t\timageHash: image.hash,\n\t\t\t\t\t\t\tscaleMode: \"FILL\",\n\t\t\t\t\t\t},\n\t\t\t\t\t];\n\t\t\t\t})\n\t\t\t\t.then(() => {\n\t\t\t\t\tfigma.closePlugin();\n\t\t\t\t});\n\t\t}\n\t} else if (msg.type === \"close-plugin\") figma.closePlugin();\n};\n"],
  "mappings": "oTAAA,IAAMA,EA2BCC,EA3BPC,EAAAC,EAAA,KAAMH,EAAiB,CACtB,CACC,KAAM,gBACN,KAAM,OACN,KAAM,CAAC,UAAW,YAAa,MAAO,OAAO,EAC7C,QAAS,CAAC,KAAK,EACf,QAAS,UACT,WAAY,IACZ,MAAO,eACR,EACA,CACC,KAAM,aACN,MAAO,yBACP,KAAM,UACN,QAAS,GACT,QAAS,GACT,WAAY,QACb,EACA,CACC,KAAM,SACN,MAAO,gBACP,KAAM,UACN,QAAS,GACT,WAAY,GACb,CACD,EAEOC,EAAQD,IC3Bf,IAAAI,EAAAC,EAAAC,GAAA,CAAAC,IAQA,MAAM,OAAO,SAAU,CACtB,MAAO,WACP,OAAQ,IACR,MAAO,IACP,YAAa,EACd,CAAC,EAMD,MAAM,GAAG,UAAmBC,GAAQC,EAAAH,EAAA,iBACnC,GAAIE,EAAI,OAAS,cAAe,CAC/B,IAAME,EAAO,CACZ,KAAM,aACN,aAAcC,EACd,eAAgB,EACjB,EAEA,MAAM,cACJ,SAAS,gBAAgB,EACzB,KAAMC,GAAU,CAChBF,EAAK,eAAiBE,EACtB,MAAM,GAAG,YAAYF,CAAI,EACzB,QAAQ,IAAI,cAAeE,CAAK,CACjC,CAAC,EACA,MAAOC,GAAQ,CACf,QAAQ,MAAM,sBAAuBA,CAAG,CACzC,CAAC,EAGH,GAAIL,EAAI,OAAS,YAYhB,GAXIA,EAAI,QACP,MAAM,cACJ,SAAS,iBAAkBA,EAAI,MAAM,EACrC,KAAK,IAAM,CACX,QAAQ,IAAI,aAAcA,EAAI,MAAM,CACrC,CAAC,EACA,MAAOK,GAAQ,CACf,QAAQ,MAAM,qBAAsBA,CAAG,CACxC,CAAC,EAGC,MAAM,YAAY,UAAU,OAAS,EACxC,MAAM,OAAO,6BAA6B,MACtC,CACJ,IAAIC,EAAY,MAAM,YAAY,UAAU,CAAC,EAE7C,GAAI,CACH,IAAMC,EAAM,MAAM,MACjB,uEACA,CACC,OAAQ,OACR,QAAS,CACR,mBAAoB,uCACpB,eAAgB,kBAEjB,EACA,KAAM,KAAK,UAAU,CACpB,KAAM,4BACN,KAAM,WACN,OAAQ,OACR,OAAQ,cACR,KAAM,CAAC,OAAQ,MAAM,EACrB,SAAU,CAAC,EACX,UAAW,GACX,iBAAkB,EACnB,CAAC,EACD,SAAU,QACX,CACD,EACA,QAAQ,IAAI,OAAQA,CAAG,CACxB,OAASF,EAAP,CACD,QAAQ,IAAI,MAAOA,CAAG,CACvB,CAEA,GAAIC,EAAK,MAAM,CAAC,EAAE,OAAS,QAAS,CACnC,IAAME,EAAQ,MAAM,eAAeF,EAAK,MAAM,CAAC,EAAE,SAAS,EACtDG,EAAa,KACbD,IACHC,EAAQ,MAAMD,EAAM,cAAc,EAGlC,MAAM,GAAG,YAAY,CACpB,KAAM,gBACN,WAAYC,CACb,CAAC,GAIH,MACE,iBACA,0HACD,EACC,KAAYD,GAAiBP,EAAAH,EAAA,iBAC7BQ,EAAK,MAAQ,CACZ,CACC,KAAM,QACN,UAAWE,EAAM,KACjB,UAAW,MACZ,CACD,CACD,EAAC,EACA,KAAK,IAAM,CACX,MAAM,YAAY,CACnB,CAAC,OAEOR,EAAI,OAAS,gBAAgB,MAAM,YAAY,CAC3D",
  "names": ["eraseBgOptions", "constants_default", "init_constants", "__esmMin", "require_plugin", "__commonJSMin", "exports", "init_constants", "msg", "__async", "body", "constants_default", "value", "err", "node", "res", "image", "bytes"]
}
